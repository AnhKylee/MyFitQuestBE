// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace MyFitQuest.API.Models;

public partial class AppDBContext : DbContext
{
    public AppDBContext()
    {
    }

    public AppDBContext(DbContextOptions<AppDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Audit_Log> Audit_Logs { get; set; }

    public virtual DbSet<Daily_Quest> Daily_Quests { get; set; }

    public virtual DbSet<Meal> Meals { get; set; }

    public virtual DbSet<Permission> Permissions { get; set; }

    public virtual DbSet<Profile> Profiles { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Role_Permission> Role_Permissions { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<User_Meal_Plan> User_Meal_Plans { get; set; }

    public virtual DbSet<User_Quest> User_Quests { get; set; }

    public virtual DbSet<User_Role> User_Roles { get; set; }

    public virtual DbSet<User_Workout_Plan> User_Workout_Plans { get; set; }

    public virtual DbSet<Workout_Plan> Workout_Plans { get; set; }
    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"));

    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=MSI;Initial Catalog=MyFitQuest;Persist Security Info=True;User ID=sa;Password=12345;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Audit_Log>(entity =>
        {
            entity.HasKey(e => e.audit_id).HasName("PK__Audit_Lo__5AF33E338FD786CE");

            entity.Property(e => e.action)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ip_address).HasMaxLength(45);
            entity.Property(e => e.target).HasMaxLength(255);
            entity.Property(e => e.timestamp)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.user).WithMany(p => p.Audit_Logs)
                .HasForeignKey(d => d.user_id)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK__Audit_Log__user___5070F446");
        });

        modelBuilder.Entity<Daily_Quest>(entity =>
        {
            entity.HasKey(e => e.quest_id).HasName("PK__Daily_Qu__9A0F00CD9F785D45");

            entity.Property(e => e.created_at)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.title)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Meal>(entity =>
        {
            entity.HasKey(e => e.meal_id).HasName("PK__Meals__2910B00FB08CA361");

            entity.Property(e => e.created_at)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.meal_name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Permission>(entity =>
        {
            entity.HasKey(e => e.permission_id).HasName("PK__Permissi__E5331AFA46B1E976");

            entity.HasIndex(e => e.permission_name, "UQ__Permissi__81C0F5A25BB83E6F").IsUnique();

            entity.Property(e => e.permission_name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Profile>(entity =>
        {
            entity.HasKey(e => e.profile_id).HasName("PK__Profiles__AEBB701F1BA0E2BF");

            entity.Property(e => e.city).HasMaxLength(100);
            entity.Property(e => e.country).HasMaxLength(100);
            entity.Property(e => e.name).HasMaxLength(100);

            entity.HasOne(d => d.user).WithMany(p => p.Profiles)
                .HasForeignKey(d => d.user_id)
                .HasConstraintName("FK__Profiles__user_i__3E52440B");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.role_id).HasName("PK__Roles__760965CC77CE8EEB");

            entity.HasIndex(e => e.role_name, "UQ__Roles__783254B11238E511").IsUnique();

            entity.Property(e => e.role_id).ValueGeneratedNever();
            entity.Property(e => e.created_at)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.role_name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Role_Permission>(entity =>
        {
            entity.HasKey(e => e.role_permission_id).HasName("PK__Role_Per__B1E85A103E0C5C84");

            entity.HasOne(d => d.permission).WithMany(p => p.Role_Permissions)
                .HasForeignKey(d => d.permission_id)
                .HasConstraintName("FK__Role_Perm__permi__4CA06362");

            entity.HasOne(d => d.role).WithMany(p => p.Role_Permissions)
                .HasForeignKey(d => d.role_id)
                .HasConstraintName("FK__Role_Perm__role___4BAC3F29");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.user_id).HasName("PK__Users__B9BE370FC591465B");

            entity.HasIndex(e => e.email, "UQ__Users__AB6E616464222DC1").IsUnique();

            entity.HasIndex(e => e.username, "UQ__Users__F3DBC5727DDE780D").IsUnique();

            entity.HasIndex(e => e.citizen_id, "UQ__Users__F6CBBCF04B20C0EB").IsUnique();

            entity.Property(e => e.citizen_id).HasMaxLength(50);
            entity.Property(e => e.created_at)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.email)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.password_hash)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.phone_number).HasMaxLength(15);
            entity.Property(e => e.updated_at)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.username)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<User_Meal_Plan>(entity =>
        {
            entity.HasKey(e => e.user_meal_id).HasName("PK__User_Mea__0606BB14B1567EC0");

            entity.Property(e => e.status)
                .HasMaxLength(20)
                .HasDefaultValue("Planned");

            entity.HasOne(d => d.meal).WithMany(p => p.User_Meal_Plans)
                .HasForeignKey(d => d.meal_id)
                .HasConstraintName("FK__User_Meal__meal___6A30C649");

            entity.HasOne(d => d.user).WithMany(p => p.User_Meal_Plans)
                .HasForeignKey(d => d.user_id)
                .HasConstraintName("FK__User_Meal__user___693CA210");
        });

        modelBuilder.Entity<User_Quest>(entity =>
        {
            entity.HasKey(e => e.user_quest_id).HasName("PK__User_Que__858E3861F038A11F");

            entity.Property(e => e.completed_at).HasColumnType("datetime");

            entity.HasOne(d => d.quest).WithMany(p => p.User_Quests)
                .HasForeignKey(d => d.quest_id)
                .HasConstraintName("FK__User_Ques__quest__619B8048");

            entity.HasOne(d => d.user).WithMany(p => p.User_Quests)
                .HasForeignKey(d => d.user_id)
                .HasConstraintName("FK__User_Ques__user___60A75C0F");
        });

        modelBuilder.Entity<User_Role>(entity =>
        {
            entity.HasKey(e => e.user_role_id).HasName("PK__User_Rol__B8D9ABA26B3059CC");

            entity.HasOne(d => d.role).WithMany(p => p.User_Roles)
                .HasForeignKey(d => d.role_id)
                .HasConstraintName("FK__User_Role__role___45F365D3");

            entity.HasOne(d => d.user).WithMany(p => p.User_Roles)
                .HasForeignKey(d => d.user_id)
                .HasConstraintName("FK__User_Role__user___44FF419A");
        });

        modelBuilder.Entity<User_Workout_Plan>(entity =>
        {
            entity.HasKey(e => e.user_workout_id).HasName("PK__User_Wor__CFC8A1F6C631A977");

            entity.Property(e => e.status)
                .HasMaxLength(20)
                .HasDefaultValue("Active");

            entity.HasOne(d => d.plan).WithMany(p => p.User_Workout_Plans)
                .HasForeignKey(d => d.plan_id)
                .HasConstraintName("FK__User_Work__plan___5AEE82B9");

            entity.HasOne(d => d.user).WithMany(p => p.User_Workout_Plans)
                .HasForeignKey(d => d.user_id)
                .HasConstraintName("FK__User_Work__user___59FA5E80");
        });

        modelBuilder.Entity<Workout_Plan>(entity =>
        {
            entity.HasKey(e => e.plan_id).HasName("PK__Workout___BE9F8F1D6914A652");

            entity.Property(e => e.created_at)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.difficulty)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.plan_name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.updated_at)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}